# Generated by Django 4.2.20 on 2025-05-26 01:32

import api.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_username_change', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='flashcard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flashcard_title', models.CharField(blank=True, max_length=255, null=True)),
                ('flashcard_question', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_title', models.CharField(blank=True, max_length=255, null=True)),
                ('note_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
            },
        ),
        migrations.CreateModel(
            name='uploadPDF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_file', models.FileField(upload_to='pdf_files/')),
                ('pdf_name', models.CharField(blank=True, max_length=255, null=True)),
                ('pdf_key', models.CharField(default=api.models.generateRandomKey, max_length=36, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_pdfs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Upload PDF',
                'verbose_name_plural': 'Upload PDFs',
            },
        ),
        migrations.CreateModel(
            name='notebook_page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_title', models.CharField(blank=True, max_length=255, null=True)),
                ('page_number', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notebooks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notebook Page',
                'verbose_name_plural': 'Notebook Pages',
            },
        ),
        migrations.CreateModel(
            name='notebook_note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('location_x', models.IntegerField(blank=True, default=0, null=True)),
                ('location_y', models.IntegerField(blank=True, default=0, null=True)),
                ('location_z', models.IntegerField(blank=True, default=0, null=True)),
                ('sidebar', models.BooleanField(default=True)),
                ('note', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='note_notebook_notes', to='api.note')),
                ('notebook_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notebook_notes', to='api.notebook_page')),
            ],
            options={
                'verbose_name': 'Notebook Note',
                'verbose_name_plural': 'Notebook Notes',
            },
        ),
        migrations.AddField(
            model_name='note',
            name='note_key',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='pdf_notes', to='api.uploadpdf'),
        ),
        migrations.AddField(
            model_name='note',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='flashcard_answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('flashcard_answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcard_answers', to='api.flashcard')),
            ],
        ),
        migrations.AddField(
            model_name='flashcard',
            name='note',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='note_flashcards', to='api.note'),
        ),
        migrations.AddField(
            model_name='flashcard',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_flashcards', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='chat_message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(blank=True, max_length=255, null=True)),
                ('note', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='note_chat_messages', to='api.note')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chat_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
